#!/bin/bash

source /c/GitNova/cmds/utils/utils

# Clean Up Menu
cleanup_menu() {
    while true; do
        clear
        echo -e "${RE}Clean Up Commands:${RT}"
        echo -e "${RE}[${WHITE}1${RE}]${OG} Remove untracked files ${GG}(git clean -f)${RT}"
        echo -e "${RE}[${WHITE}2${RE}]${OG} Remove untracked directories ${GG}(git clean -fd)${RT}"
        echo -e "${RE}[${WHITE}3${RE}]${OG} Prune remote-tracking branches ${GG}(git remote prune origin)${RT}"
        echo -e "${RE}[${WHITE}4${RE}]${OG} Delete merged branches ${GG}(git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d)${RT}"
        echo -e "${RE}[${WHITE}5${RE}]${OG} Clean up dangling objects ${GG}(git gc --prune=now)${RT}"
        echo -e "${RE}[${WHITE}0${RE}]${OG} Back to Main Menu${RT}"
        echo
        read -p "${GG}Select an option: ${WHITE}" choice
        case $choice in
            1) remove_untracked_files ;;
            2) remove_untracked_directories ;;
            3) prune_remote_branches ;;
            4) delete_merged_branches ;;
            5) cleanup_dangling_objects ;;
            0) clear; break ;;
            *) echo -e "${RE}Invalid option! Try again.${RT}" ;;
        esac
        read -p "${GG}Press [Enter] to continue...${RT}"
    done
}

# Function to remove untracked files
remove_untracked_files() {
    echo -e "${OG}Removing untracked files...${RT}"
    if confirm; then
        echo -e "${GG}Command: git clean -f${RT}"
        git clean -f
    fi
}

# Function to remove untracked directories
remove_untracked_directories() {
    echo -e "${OG}Removing untracked directories...${RT}"
    if confirm; then
        echo -e "${GG}Command: git clean -fd${RT}"
        git clean -fd
    fi
}

# Function to prune remote-tracking branches
prune_remote_branches() {
    echo -e "${OG}Pruning remote-tracking branches...${RT}"
    if confirm; then
        echo -e "${GG}Command: git remote prune origin${RT}"
        git remote prune origin
    fi
}

# Function to delete merged branches
delete_merged_branches() {
    echo -e "${OG}Deleting merged branches...${RT}"
    if confirm; then
        echo -e "${GG}Command: git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d${RT}"
        git branch --merged | grep -v '\*' | xargs -n 1 git branch -d
    fi
}

# Function to clean up dangling objects
cleanup_dangling_objects() {
    echo -e "${OG}Cleaning up dangling objects...${RT}"
    if confirm; then
        echo -e "${GG}Command: git gc --prune=now${RT}"
        git gc --prune=now
    fi
}

# Main Execution
check_git_repo
git_status
cleanup_menu