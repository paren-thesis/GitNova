#!/bin/bash

source /c/GitNova/cmds/utils/utils


# Submodules Menu
submodules_menu() {
    while true; do
        clear
        echo -e "${RE}Submodules Commands Options:${RT}"
        echo -e "${RE}[${WHITE}1${RE}]${OG} Add a submodule ${GG}git submodule add repository_url path"
        echo -e "${RE}[${WHITE}2${RE}]${OG} Initialize submodules ${GG}git submodule init"
        echo -e "${RE}[${WHITE}3${RE}]${OG} Update submodules ${GG}git submodule update"
        echo -e "${RE}[${WHITE}4${RE}]${OG} Remove a submodule ${GG}manual steps requiRE"
        echo -e "${RE}[${WHITE}5${RE}]${OG} Show submodule status ${GG}git submodule status"
		echo -e "${RE}[${WHITE}6${RE}]${OG} Clone repository with submodules ${GG}git clone --recurse-submodules"
		echo -e "${RE}[${WHITE}7${RE}]${OG} Synchronize submodules ${GG}git submodule sync --recursive"
		echo -e "${RE}[${WHITE}8${RE}]${OG} List submodules ${GG}git config --file .gitmodules --get-regexp path"
		echo -e "${RE}[${WHITE}9${RE}]${OG} Rebase submodules ${GG}git submodule foreach git pull origin main"
		echo -e "${RE}[${WHITE}0${RE}]${OG} Back to main menu"
        echo
        read -p "${RE}[${WHITE}-${RE}]${GG} Select an option: ${BB}" selected

        case $selected in
            1) add_submodule ;;
            2) init_submodules ;;
            3) update_submodules ;;
            4) remove_submodule ;;
            5) show_submodule_status ;;
			6) clone_with_submodules ;;
			7) synchronize_submodules ;;
			8) list_submodules ;;
			9) rebase_submodules ;;
            0) clear; break ;;  # Exit the loop and return to the main menu
            *) echo "${RE}Invalid option! Please try again.${RT}" ;;
        esac

        read -p "${GG}Press [Enter] to return to the menu...${RT}"
    done
}

# Functions for each option
add_submodule() {
    read -p "${GG}Enter the repository URL for the submodule: ${BB}" repo_url
    if ! git ls-remote --exit-code "$repo_url" > /dev/null 2>&1; then
        echo -e "${RE}Error: Repository '$repo_url' not found or unreachable.${RT}"
        return
    fi

    read -p "${GG}Enter the path where the submodule should be added: ${BB}" submodule_path
    if [[ -z "$submodule_path" ]]; then
        echo -e "${RE}Error: Submodule path cannot be empty.${RT}"
        return
    fi

    echo "${GG}Adding submodule...${RT}"
    git submodule add "$repo_url" "$submodule_path"
    if [ $? -ne 0 ]; then
        echo -e "${RE}Failed to add submodule '${submodule_path}'.${RT}"
    else
        echo -e "${GG}Submodule '${submodule_path}' added successfully.${RT}"
    fi
}

init_submodules() {
    if [[ -z $(git config --file .gitmodules --get-regexp path) ]]; then
        echo -e "${RE}No submodules to initialize.${RT}"
        return
    fi

    echo "${GG}Initializing submodules...${RT}"
    git submodule init
    if [ $? -ne 0 ]; then
        echo -e "${RE}Failed to initialize submodules.${RT}"
    else
        echo -e "${GG}Submodules initialized successfully.${RT}"
    fi
}

update_submodules() {
    read -p "${GG}Fetch updates from remotes? (y/n): ${BB}" fetch_updates
    if [[ "$fetch_updates" == "y" || "$fetch_updates" == "Y" ]]; then
        echo "${GG}Updating submodules with remote changes...${RT}"
        git submodule update --remote --merge
    else
        echo "${GG}Updating submodules...${RT}"
        git submodule update
    fi
    if [ $? -ne 0 ]; then
        echo -e "${RE}Failed to update submodules.${RT}"
    else
        echo -e "${GG}Submodules updated successfully.${RT}"
    fi
}

remove_submodule() {
    read -p "${GG}Enter the submodule path to remove: ${BB}" submodule_path
    if [[ -z "$submodule_path" ]]; then
        echo -e "${RE}Error: Submodule path cannot be empty.${RT}"
        return
    fi

    if ! git config --file .gitmodules --get-regexp "path" | grep -q "$submodule_path"; then
        echo -e "${RE}Error: Submodule at path '$submodule_path' not found.${RT}"
        return
    fi

    if ! confirm; then
        echo -e "${OG}Operation canceled.${RT}"
        return
    fi

    echo "${GG}Removing submodule...${RT}"
    git submodule deinit -f "$submodule_path"
    rm -rf ".git/modules/$submodule_path"
    git rm -f "$submodule_path"
    git config --file .gitmodules --remove-section "submodule.$submodule_path" > /dev/null 2>&1
    sed -i "/\[submodule \"$submodule_path\"\]/,/^$/d" .git/config > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "${GG}Submodule '${submodule_path}' removed successfully.${RT}"
    else
        echo -e "${RE}Failed to remove submodule '${submodule_path}'.${RT}"
    fi
}

show_submodule_status() {
    echo "${GG}Submodule status:${RT}"
    git submodule status --recursive
}

clone_with_submodules() {
    read -p "${OG}Enter the repository URL to clone: ${WHITE}" repo_url
    if [[ -z "$repo_url" ]]; then
        echo -e "${RE}Error: Repository URL cannot be empty.${RT}"
        return
    fi

    read -p "${OG}Enter the directory name to clone into (leave blank for default): ${WHITE}" dir_name
    if [[ -n "$dir_name" ]]; then
        echo -e "${CY}Cloning repository with submodules into '$dir_name'...${RT}"
        git clone --recurse-submodules "$repo_url" "$dir_name"
    else
        echo -e "${CY}Cloning repository with submodules...${RT}"
        git clone --recurse-submodules "$repo_url"
    fi

    if [ $? -eq 0 ]; then
        echo -e "${GG}Repository cloned successfully with submodules.${RT}"
    else
        echo -e "${RE}Failed to clone repository with submodules.${RT}"
    fi
}

synchronize_submodules() {
    echo -e "${CY}Synchronizing submodules with upstream repositories...${RT}"
    git submodule sync --recursive
    if [ $? -eq 0 ]; then
        echo -e "${GG}Submodules synchronized successfully.${RT}"
    else
        echo -e "${RE}Failed to synchronize submodules.${RT}"
    fi
}

list_submodules() {
    echo -e "${CY}Listing all submodules:${RT}"
    git config --file .gitmodules --get-regexp path | while read line; do
        submodule_path=$(echo "$line" | awk '{print $2}')
        echo -e "${GG}- Submodule Path: ${WHITE}$submodule_path${RT}"
    done

    if [ $? -ne 0 ]; then
        echo -e "${RE}No submodules found in this repository.${RT}"
    fi
}

rebase_submodules() {
    echo -e "${CY}Rebasing submodules onto their latest commits...${RT}"
    git submodule foreach 'git pull origin main'
    if [ $? -eq 0 ]; then
        echo -e "${GG}Submodules rebased successfully.${RT}"
    else
        echo -e "${RE}Failed to rebase submodules. Resolve conflicts and try again.${RT}"
    fi
}

check_git_repo
submodules_menu