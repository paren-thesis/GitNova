#!/bin/bash

source /c/GitNova/cmds/utils/utils

# Branch Management
branch_management() {
    echo "${CY}Branch Management Commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} Create a branch: ${GG}git checkout -b branch_name"
    echo -e "${CY}[${WH}2${CY}]${OG} Delete a branch: ${GG}git branch -d branch_name"
    echo -e "${CY}[${WH}3${CY}]${OG} Merge a branch: ${GG}git merge branch_name"
    echo -e "${CY}[${WH}4${CY}]${OG} List all branches: ${GG}git branch"
    echo -e "${CY}[${WH}5${CY}]${OG} Switch to a branch: ${GG}git checkout branch_name"
}

# Configuration and Setup
configuration_setup() {
    echo "${CY}Configuration and Setup Commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} Set user name ${GG}git config --global user.name username"
    echo -e "${CY}[${WH}2${CY}]${OG} Set user email ${GG}git config --global user.email useremail"
    echo -e "${CY}[${WH}3${CY}]${OG} View configuration ${GG}git config --list"
    echo -e "${CY}[${WH}4${CY}]${OG} Initialize repository ${GG}git init"
}

# Commit Changes
commit() {
    echo "${CY}Commit Changes commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} Commit changes with a message ${GG}git commit -m 'message'"
    echo -e "${CY}[${WH}2${CY}]${OG} Amend the last commit ${GG}git commit --amend"
    echo -e "${CY}[${WH}3${CY}]${OG} Commit only specific files ${GG}git commit file_name -m 'message'"
    echo -e "${CY}[${WH}4${CY}]${OG} Skip staging and commit directly ${GG}git commit -a -m 'message'"
}

# Staging and Stash
staging_and_stash() {
    echo "${CY}Staging and Stash Commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} Stage all changes ${GG}git add ."
    echo -e "${CY}[${WH}2${CY}]${OG} Stage a specific file ${GG}git add file_name"
    echo -e "${CY}[${WH}3${CY}]${OG} Unstage a file ${GG}git reset file_name"
    echo -e "${CY}[${WH}4${CY}]${OG} Stash changes ${GG}git stash"
    echo -e "${CY}[${WH}5${CY}]${OG} Apply stashed changes ${GG}git stash apply"
    echo -e "${CY}[${WH}6${CY}]${OG} List stashed changes ${GG}git stash list"
}

# Undoing Changes
undoing_changes() {
    echo "${CY}Undoing Changes Commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} Undo unstaged changes to a file ${GG}git checkout -- file_name"
    echo -e "${CY}[${WH}2${CY}]${OG} Undo staged changes ${GG}git reset HEAD file_name"
    echo -e "${CY}[${WH}3${CY}]${OG} Revert a commit ${GG}git revert commit_hash"
    echo -e "${CY}[${WH}4${CY}]${OG} Reset to a previous commit ${GG}git reset --hard commit_hash"
    echo -e "${CY}[${WH}5${CY}]${OG} Remove untracked files ${GG}git clean -f"
}

# Remote Repositories
remote_repositories() {
    echo "${CY}Remote Repositories Commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} Add a remote repository ${GG}git remote add name url"
    echo -e "${CY}[${WH}2${CY}]${OG} Remove a remote repository ${GG}git remote remove name"
    echo -e "${CY}[${WH}3${CY}]${OG} List all remotes ${GG}git remote -v"
    echo -e "${CY}[${WH}4${CY}]${OG} Fetch from a remote repository ${GG}git fetch remote_name"
    echo -e "${CY}[${WH}5${CY}]${OG} Push changes to a remote repository ${GG}git push remote_name branch_name"
    echo -e "${CY}[${WH}6${CY}]${OG} Pull changes from a remote repository ${GG}git pull remote_name branch_name"
}

# Logs and History
logs_and_history() {
    echo "${CY}Logs and History Commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} View commit history ${GG}git log"
    echo -e "${CY}[${WH}2${CY}]${OG} View one-line commit history ${GG}git log --oneline"
    echo -e "${CY}[${WH}3${CY}]${OG} View commit history with graph ${GG}git log --oneline --graph"
    echo -e "${CY}[${WH}4${CY}]${OG} View the last N commits ${GG}git log -n N"
    echo -e "${CY}[${WH}5${CY}]${OG} View a specific file's commit history ${GG}git log -- file_name"
}

# Working with Submodules
submodules() {
    echo "${CY}Working with Submodules Commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} Add a submodule ${GG}git submodule add repository_url path"
    echo -e "${CY}[${WH}2${CY}]${OG} Initialize submodules ${GG}git submodule init"
    echo -e "${CY}[${WH}3${CY}]${OG} Update submodules ${GG}git submodule update"
    echo -e "${CY}[${WH}4${CY}]${OG} Remove a submodule ${GG}manual steps requiCY"
    echo -e "${CY}[${WH}5${CY}]${OG} Show submodule status ${GG}git submodule status"
}

# Advanced Commands
advanced_commands() {
    echo "${CY}Advanced Commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} Squash commits into one ${GG}git rebase -i HEAD~n"
    echo -e "${CY}[${WH}2${CY}]${OG} Cherry-pick a commit ${GG}git cherry-pick commit_hash"
    echo -e "${CY}[${WH}3${CY}]${OG} Revert a specific commit ${GG}git revert commit_hash"
    echo -e "${CY}[${WH}4${CY}]${OG} Fix the last commit ${GG}git commit --amend"
    echo -e "${CY}[${WH}5${CY}]${OG} View changes in staged files ${GG}git diff --cached"
}

# Clean Up
clean_up() {
    echo "${CY}Clean Up Commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} Remove untracked files ${GG}git clean -f"
    echo -e "${CY}[${WH}2${CY}]${OG} Remove untracked directories ${GG}git clean -fd"
    echo -e "${CY}[${WH}3${CY}]${OG} Prune remote-tracking branches ${GG}git remote prune origin"
    echo -e "${CY}[${WH}4${CY}]${OG} Delete merged branches ${GG}git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    echo -e "${CY}[${WH}5${CY}]${OG} Clean up dangling objects ${GG}git gc --prune=now"
}

# Tagging
tagging() {
    echo "${CY}Tagging Commands:"
    echo -e "${CY}[${WH}1${CY}]${OG} Create a new tag ${GG}git tag tag_name"
    echo -e "${CY}[${WH}2${CY}]${OG} List all tags ${GG}git tag"
    echo -e "${CY}[${WH}3${CY}]${OG} Delete a tag ${GG}git tag -d tag_name"
    echo -e "${CY}[${WH}4${CY}]${OG} Push a tag to remote ${GG}git push origin tag_name"
    echo -e "${CY}[${WH}5${CY}]${OG} Push all tags to remote ${GG}git push --tags"
    echo -e "${CY}[${WH}6${CY}]${OG} Show tag details ${GG}git show tag_name"
}

list_em() {
    echo "${CY}Listing commands Commands:"
configuration_setup
branch_management
staging_and_stash
commit
undoing_changes
remote_repositories
logs_and_history
submodules
advanced_commands
clean_up
tagging
}

list_em
