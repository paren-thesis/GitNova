#!/bin/bash

source /c/GitNova/cmds/utils/utils


# Undoing Changes Menu
undoing_changes_menu() {
    while true; do
        clear
        echo -e "${RE}Undoing Changes Options:${RT}"
        echo -e "${RE}[${WH}1${RE}]${OG} Undo unstaged changes to a file ${GG}git checkout -- file_name"
        echo -e "${RE}[${WH}2${RE}]${OG} Undo staged changes ${GG}git reset HEAD file_name"
        echo -e "${RE}[${WH}3${RE}]${OG} Revert a commit ${GG}git revert commit_hash"
        echo -e "${RE}[${WH}4${RE}]${OG} Reset to a previous commit ${GG}git reset --hard commit_hash"
        echo -e "${RE}[${WH}5${RE}]${OG} Remove untracked files ${GG}git clean -f"
		echo -e "${RE}[${WH}6${RE}]${OG} View staged changes before unstaging ${GG}git diff --cached"
		echo -e "${RE}[${WH}7${RE}]${OG} Perform a soft reset ${GG}git reset --soft commit_hash"
		echo -e "${RE}[${WH}8${RE}]${OG} Run git clean in interactive mode ${GG}git clean -i"
		echo -e "${RE}[${WH}9${RE}]${OG} Recover unstaged changes ${GG}git restore --staged file_name"
        echo -e "${RE}[${WH}0${RE}]${OG} Back to main menu"
        echo
        read -p "${RE}[${WH}-${RE}]${GG} Select an option: ${BB}" selected

        case $selected in
            1) undo_unstaged_changes ;;
            2) undo_staged_changes ;;
            3) revert_commit ;;
            4) reset_to_commit ;;
            5) remove_untracked_files ;;
			6) view_staged_changes ;;
			7) soft_reset ;;
			8) interactive_clean ;;
			9) recover_unstaged_changes ;;
            0) clear; break ;;  # Exit the loop and return to the main menu
            *) echo "${RE}Invalid option! Please try again.${RT}" ;;
        esac

        read -p "${GG}Press [Enter] to return to the menu...${RT}"
    done
}

# Functions for each option
undo_unstaged_changes() {
 read -p "${GG}Enter the file name to undo unstaged changes: ${BB}" file_name
    if ! git ls-files --error-unmatch "$file_name" > /dev/null 2>&1; then
        echo -e "${RE}Error: File '$file_name' not found or not tracked by Git.${RT}"
        return
    fi
    git checkout -- "$file_name"
    echo "${GG}Unstaged changes for '$file_name' have been undone.${RT}"
}

undo_staged_changes() {
    read -p "${GG}Enter the file name to unstage: ${BB}" file_name
    if ! git diff --cached --quiet "$file_name"; then
        echo -e "${RE}Error: File '$file_name' is not staged.${RT}"
        return
    fi
    git reset HEAD "$file_name"
    echo "${GG}Staged changes for '$file_name' have been undone.${RT}"
}

revert_commit() {
    read -p "${GG}Enter the commit hash to revert: ${BB}" commit_hash
    if ! git rev-parse "$commit_hash" > /dev/null 2>&1; then
        echo -e "${RE}Error: Commit hash '$commit_hash' not found.${RT}"
        return
    fi
    git revert "$commit_hash"
    echo "${GG}Commit '$commit_hash' has been reverted.${RT}"
}

reset_to_commit() {
    read -p "${GG}Enter the commit hash to reset to: ${BB}" commit_hash
    if ! git rev-parse "$commit_hash" > /dev/null 2>&1; then
        echo -e "${RE}Error: Commit hash '$commit_hash' not found.${RT}"
        return
    fi
    if confirm; then
        git reset --hard "$commit_hash"
        echo "${GG}Repository has been reset to commit '$commit_hash'.${RT}"
    else
        echo "${OG}Operation canceled.${RT}"
    fi
}

remove_untracked_files() {
    if confirm; then
        git clean -f
        echo "${GG}All untracked files have been removed.${RT}"
    else
        echo "${OG}Operation canceled.${RT}"
    fi
}

view_staged_changes() {
    echo -e "${OG}Viewing staged changes...${RT}"
    git diff --cached
    if [ $? -ne 0 ]; then
        echo -e "${RE}No staged changes found.${RT}"
    fi
}

soft_reset() {
    read -p "${OG}Enter the commit hash to reset to: ${WH}" commit_hash
    if ! git rev-parse "$commit_hash" > /dev/null 2>&1; then
        echo -e "${RE}Error: Commit hash '$commit_hash' not found.${RT}"
        return
    fi

    echo -e "${OG}Performing soft reset to commit '$commit_hash'...${RT}"
    git reset --soft "$commit_hash"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Repository has been softly reset to commit '$commit_hash'.${RT}"
    else
        echo -e "${RE}Failed to perform soft reset.${RT}"
    fi
}

interactive_clean() {
    echo -e "${OG}Running git clean in interactive mode...${RT}"
    echo -e "${WH}Command: git clean -i${RT}"
    git clean -i
    if [ $? -eq 0 ]; then
        echo -e "${GG}Interactive cleanup completed.${RT}"
    else
        echo -e "${RE}Failed to start interactive cleanup.${RT}"
    fi
}

recover_unstaged_changes() {
    read -p "${OG}Enter the file name to recover unstaged changes: ${WH}" file_name
    if ! git ls-files --error-unmatch "$file_name" > /dev/null 2>&1; then
        echo -e "${RE}Error: File '$file_name' not found or not tracked by Git.${RT}"
        return
    fi

    echo -e "${OG}Recovering unstaged changes for '$file_name'...${RT}"
    git restore --staged "$file_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Unstaged changes for '$file_name' have been recoveRE.${RT}"
    else
        echo -e "${RE}Failed to recover unstaged changes for '$file_name'.${RT}"
    fi
}


check_git_repo
undoing_changes_menu
