#!/bin/bash

source /c/GitNova/cmds/utils/utils

# Tagging Menu
tagging_menu() {
    while true; do
        clear
        echo -e "${RE}Tagging Commands:${RT}"
        echo -e "${RE}[${WH}1${RE}]${OG} Create a new tag ${GG}git tag tag_name"
        echo -e "${RE}[${WH}2${RE}]${OG} List all tags ${GG}git tag"
        echo -e "${RE}[${WH}3${RE}]${OG} Delete a tag ${GG}git tag -d tag_name"
        echo -e "${RE}[${WH}4${RE}]${OG} Push a tag to remote ${GG}git push origin tag_name"
        echo -e "${RE}[${WH}5${RE}]${OG} Push all tags to remote ${GG}git push --tags"
        echo -e "${RE}[${WH}6${RE}]${OG} Show tag details ${GG}git show tag_name"
		echo -e "${RE}[${WH}7${RE}]${OG} View commit associated with a tag ${GG}git log -1 tag_name"
		echo -e "${RE}[${WH}8${RE}]${OG} Delete a remote tag ${GG}git push origin --delete tag_name"
		echo -e "${RE}[${WH}9${RE}]${OG} Sign a tag with GPG ${GG}git tag -s tag_name -m 'message'"
		echo -e "${RE}[${WH}10${RE}]${OG} Verify a signed tag ${GG}git tag -v tag_name"
        echo -e "${RE}[${WH}0${RE}]${OG} Back to Main Menu"
        echo

        read -p "${GG}Select an option: ${WH}" choice
        case $choice in
            1) create_tag ;;
            2) list_tags ;;
            3) delete_tag ;;
            4) push_tag ;;
            5) push_all_tags ;;
            6) show_tag_details ;;
			7) view_tag_commit ;;
			8) delete_remote_tag ;;
			9) sign_tag ;;
			10) verify_tag ;;
            0) clear; break ;;
            *) echo -e "${RE}Invalid option! Try again.${RT}" ;;
        esac
        read -p "${GG}Press [Enter] to continue...${RT}"
    done
}

# Function to create a new tag
create_tag() {
    read -p "${OG}Enter tag name: ${WH}" tag_name
    if [[ -z "$tag_name" || "$tag_name" =~ [^a-zA-Z0-9._-] ]]; then
        echo -e "${RE}Error: Invalid tag name. Use only letters, numbers, dots, underscores, or hyphens.${RT}"
        return
    fi

    read -p "${OG}Create an annotated tag? (y/n): ${WH}" annotate
    if [[ "$annotate" == "y" || "$annotate" == "Y" ]]; then
        read -p "${OG}Enter tag message: ${WH}" message
        git tag -a "$tag_name" -m "$message"
    else
        git tag "$tag_name"
    fi

    if [ $? -eq 0 ]; then
        echo -e "${GG}Tag '${tag_name}' created.${RT}"
    else
        echo -e "${RE}Failed to create tag '${tag_name}'.${RT}"
    fi
}

# Function to list all tags
list_tags() {
    echo -e "${GG}Listing all tags (sorted by creation date):${RT}"
    git tag --sort=-creatordate
}

# Function to delete a tag
delete_tag() {
    read -p "${OG}Enter tag name to delete: ${WH}" tag_name
    if ! git rev-parse --verify "$tag_name" > /dev/null 2>&1; then
        echo -e "${RE}Error: Tag '$tag_name' not found.${RT}"
        return
    fi

    if ! confirm; then
        echo -e "${OG}Operation canceled.${RT}"
        return
    fi

    git tag -d "$tag_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Tag '${tag_name}' deleted.${RT}"
    else
        echo -e "${RE}Failed to delete tag '${tag_name}'.${RT}"
    fi
}

# Function to push a tag to remote
push_tag() {
    read -p "${OG}Enter tag name to push: ${WH}" tag_name
    if ! git rev-parse --verify "$tag_name" > /dev/null 2>&1; then
        echo -e "${RE}Error: Tag '$tag_name' not found locally.${RT}"
        return
    fi

    git push origin "$tag_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Tag '${tag_name}' pushed to remote.${RT}"
    else
        echo -e "${RE}Failed to push tag '${tag_name}' to remote.${RT}"
    fi
}

# Function to push all tags to remote
push_all_tags() {
    if ! confirm; then
        echo -e "${OG}Operation canceled.${RT}"
        return
    fi

    git push --tags
    if [ $? -eq 0 ]; then
        echo -e "${GG}All tags pushed to remote.${RT}"
    else
        echo -e "${RE}Failed to push tags to remote.${RT}"
    fi
}

# Function to show tag details
show_tag_details() {
    read -p "${OG}Enter tag name to view details: ${WH}" tag_name
    if ! git rev-parse --verify "$tag_name" > /dev/null 2>&1; then
        echo -e "${RE}Error: Tag '$tag_name' not found.${RT}"
        return
    fi

    echo -e "${GG}Details for tag '${tag_name}':${RT}"
    git show "$tag_name"
}

view_tag_commit() {
    read -p "${OG}Enter tag name to view associated commit: ${WH}" tag_name
    if ! git rev-parse --verify "$tag_name" > /dev/null 2>&1; then
        echo -e "${RE}Error: Tag '$tag_name' not found.${RT}"
        return
    fi

    echo -e "${GG}Commit associated with tag '${tag_name}':${RT}"
    git log -1 "$tag_name"
}

delete_remote_tag() {
    read -p "${OG}Enter tag name to delete from remote: ${WH}" tag_name
    if ! git rev-parse --verify "$tag_name" > /dev/null 2>&1; then
        echo -e "${RE}Error: Tag '$tag_name' not found locally.${RT}"
        return
    fi

    if ! confirm; then
        echo -e "${OG}Operation canceled.${RT}"
        return
    fi

    git push origin --delete "$tag_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Tag '${tag_name}' deleted from remote.${RT}"
    else
        echo -e "${RE}Failed to delete tag '${tag_name}' from remote.${RT}"
    fi
}

sign_tag() {
    read -p "${OG}Enter tag name to sign: ${WH}" tag_name
    read -p "${OG}Enter tag message: ${WH}" message
    git tag -s "$tag_name" -m "$message"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Tag '${tag_name}' signed successfully.${RT}"
    else
        echo -e "${RE}Failed to sign tag '${tag_name}'.${RT}"
    fi
}

verify_tag() {
    read -p "${OG}Enter tag name to verify: ${WH}" tag_name
    git tag -v "$tag_name"
}


# Call the menu
check_git_repo
tagging_menu
