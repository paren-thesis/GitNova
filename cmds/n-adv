#!/bin/bash

source /c/GitNova/cmds/utils/utils

# Advanced Commands Menu
advanced_menu() {
    while true; do
        clear
        echo -e "${CY}Advanced Git Commands:${RT}"
        echo -e "${RE}[${WH}1${RE}]${OG} Squash commits into one ${GG}git rebase -i HEAD~n"
        echo -e "${RE}[${WH}2${RE}]${OG} Cherry-pick a commit ${GG}git cherry-pick commit_hash"
        echo -e "${RE}[${WH}3${RE}]${OG} Revert a specific commit ${GG}git revert commit_hash"
        echo -e "${RE}[${WH}4${RE}]${OG} Fix the last commit ${GG}git commit --amend"
        echo -e "${RE}[${WH}5${RE}]${OG} View changes in staged files ${GG}git diff --cached"
		echo -e "${RE}[${WH}6${RE}]${OG} Perform interactive rebase ${GG}git rebase -i HEAD~n"
		echo -e "${RE}[${WH}7${RE}]${OG} Bisect commits ${GG}git bisect start bad_commit good_commit"
		echo -e "${RE}[${WH}8${RE}]${OG} Show commit details ${GG}git show commit_hash"
		echo -e "${RE}[${WH}9${RE}]${OG} Search commits by message ${GG}git log --grep='message'"
        echo -e "${RE}[${WH}0${RE}]${OG} Back to Main Menu"
        echo

        read -p "${GG}Select an option: ${WH}" choice
        case $choice in
            1) squash_commits ;;
            2) cherry_pick ;;
            3) revert_commit ;;
            4) fix_last_commit ;;
            5) view_staged_diff ;;
			6) interactive_rebase ;;
			7) bisect_start ;;
			8) show_commit_details ;;
			9) search_commits_by_message ;;
            0) clear; break ;;
            *) echo -e "${RE}Invalid option! Try again.${RT}" ;;
        esac
        read -p "${GG}Press [Enter] to continue...${RT}"
    done
}

# Function to squash commits into one
squash_commits() {
    read -p "${OG}Enter the number of commits to squash: ${WH}" n
    if ! [[ "$n" =~ ^[0-9]+$ ]]; then
        echo -e "${RE}Error: Please enter a valid number.${RT}"
        return
    fi

    echo -e "${OG}Squashing the last $n commits into one.${RT}"
    echo -e "${WH}Command: git rebase -i HEAD~$n${RT}"
    git rebase -i HEAD~"$n"
}

# Function to cherry-pick a commit
cherry_pick() {
    read -p "${OG}Enter the commit hash to cherry-pick: ${WH}" commit_hash
    if ! git rev-parse "$commit_hash" > /dev/null 2>&1; then
        echo -e "${RE}Error: Commit hash '$commit_hash' not found.${RT}"
        return
    fi

    echo -e "${GG}Cherry-picking commit: ${commit_hash}${RT}"
    echo -e "${WH}Command: git cherry-pick ${commit_hash}${RT}"
    git cherry-pick "$commit_hash"
}

# Function to revert a specific commit
revert_commit() {
    read -p "${OG}Enter the commit hash to revert: ${WH}" commit_hash
    if ! git rev-parse "$commit_hash" > /dev/null 2>&1; then
        echo -e "${RE}Error: Commit hash '$commit_hash' not found.${RT}"
        return
    fi

    if ! confirm; then
        echo -e "${OG}Operation canceled.${RT}"
        return
    fi

    echo -e "${GG}Reverting commit: ${commit_hash}${RT}"
    echo -e "${WH}Command: git revert ${commit_hash}${RT}"
    git revert "$commit_hash"
}

# Function to fix the last commit
fix_last_commit() {
    echo -e "${OG}Listing last two commits..."
    echo -e "${WH}Command: git log -oneline -2${RT}"
    git log -oneline -2

    if ! confirm; then
        echo -e "${OG}Operation canceled.${RT}"
        return
    fi

    echo -e "${OG}Fixing the last commit.${RT}"
    echo -e "${WH}Command: git commit --amend${RT}"
    git commit --amend
}

# Function to view changes in staged files
view_staged_diff() {
    echo -e "${OG}Viewing changes in staged files.${RT}"
    echo -e "${WH}Command: git diff --cached${RT}"
    git diff --cached | less -R
}

interactive_rebase() {
    read -p "${OG}Enter the number of commits to rebase: ${WH}" n
    if ! [[ "$n" =~ ^[0-9]+$ ]]; then
        echo -e "${RE}Error: Please enter a valid number.${RT}"
        return
    fi

    echo -e "${OG}Performing interactive rebase on the last $n commits.${RT}"
    echo -e "${WH}Command: git rebase -i HEAD~$n${RT}"
    git rebase -i HEAD~"$n"
}

bisect_start() {
    read -p "${OG}Enter the bad commit hash: ${WH}" bad_commit
    read -p "${OG}Enter the good commit hash: ${WH}" good_commit

    if ! git rev-parse "$bad_commit" > /dev/null 2>&1 || ! git rev-parse "$good_commit" > /dev/null 2>&1; then
        echo -e "${RE}Error: Invalid commit hash provided.${RT}"
        return
    fi

    echo -e "${OG}Starting bisect with bad commit: $bad_commit and good commit: $good_commit.${RT}"
    echo -e "${WH}Command: git bisect start $bad_commit $good_commit${RT}"
    git bisect start "$bad_commit" "$good_commit"
}

show_commit_details() {
    read -p "${OG}Enter the commit hash to view details: ${WH}" commit_hash
    if ! git rev-parse "$commit_hash" > /dev/null 2>&1; then
        echo -e "${RE}Error: Commit hash '$commit_hash' not found.${RT}"
        return
    fi

    echo -e "${OG}Showing details for commit: $commit_hash${RT}"
    echo -e "${WH}Command: git show $commit_hash${RT}"
    git show "$commit_hash"
}

search_commits_by_message() {
    read -p "${OG}Enter the keyword to search in commit messages: ${WH}" keyword
    if [[ -z "$keyword" ]]; then
        echo -e "${RE}Error: Keyword cannot be empty.${RT}"
        return
    fi

    echo -e "${OG}Searching commits with message containing: $keyword${RT}"
    echo -e "${WH}Command: git log --grep='$keyword'${RT}"
    git log --grep="$keyword"
}

check_git_repo
advanced_menu
