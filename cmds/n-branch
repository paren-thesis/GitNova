#!/bin/bash

source /c/GitNova/cmds/utils/utils

# Display Branch Management Menu
branch_menu() {
    clear
    echo -e "${CY}Branch Management Commands:${RT}"
    echo -e "${RE}[${WH}1${RE}]${OG} Create a branch: ${GG}git checkout -b branch_name"
    echo -e "${RE}[${WH}2${RE}]${OG} Delete a branch: ${GG}git branch -d branch_name"
    echo -e "${RE}[${WH}3${RE}]${OG} Merge a branch: ${GG}git merge branch_name"
    echo -e "${RE}[${WH}4${RE}]${OG} List all branches: ${GG}git branch"
    echo -e "${RE}[${WH}5${RE}]${OG} Switch to a branch: ${GG}git checkout branch_name"
    echo -e "${RE}[${WH}6${RE}]${OG} Create a remote branch: ${GG}git push -u origin branch_name"
    echo -e "${RE}[${WH}7${RE}]${OG} Delete a remote branch: ${GG}git push origin --delete branch_name"
    echo -e "${RE}[${WH}8${RE}]${OG} Switch to a remote branch: ${GG}git checkout -b branch_name origin/branch_name"
    echo -e "${RE}[${WH}9${RE}]${OG} Rebase a branch: ${GG}git rebase branch_name"
    echo -e "${RE}[${WH}10${RE}]${OG} Rename a branch: ${GG}git branch -m old_name new_name"
    echo -e "${RE}[${WH}11${RE}]${OG} View branch history: ${GG}git log branch_name --oneline"
    echo -e "${RE}[${WH}0${RE}]${OG} Back to main menu"
    echo
}


# Function to create a branch
create_branch() {
    list_branches
    read -p "${GG}Enter the name of the new branch: ${BB}" branch_name
    if [[ ! "$branch_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo -e "${RE}Error: Invalid branch name.${RT}"
        return
    fi
    git checkout -b "$branch_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Branch '$branch_name' created successfully!${RT}"
    else
        echo -e "${RE}Failed to create branch '$branch_name'.${RT}"
    fi
}

# Function to delete a branch
delete_branch() {
    list_branches
    read -p "${GG}Enter the name of the branch to delete: ${BB}" branch_name
    read -p "${GG}Force delete unmerged branch? (y/n): ${BB}" force
    if [[ $force == "y" || $force == "Y" ]]; then
        git branch -D "$branch_name"
    else
        git branch -d "$branch_name"
    fi
    if [ $? -eq 0 ]; then
        echo -e "${GG}Branch '$branch_name' deleted successfully!${RT}"
    else
        echo -e "${RE}Failed to delete branch '$branch_name'.${RT}"
    fi
}

# Function to merge a branch
merge_branch() {
    list_branches
    read -p "${GG}Enter the name of the branch to merge: ${BB}" branch_name
    git merge "$branch_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Branch '$branch_name' merged successfully!${RT}"
    else
        echo -e "${RE}Merge conflict detected! Resolve conflicts and commit the changes.${RT}"
    fi
}

# Function to list all branches
list_branches() {
    echo "${CY}Listing all branches:${RT}"
    git branch
}

# Function to switch to a branch
switch_branch() {
    list_branches
    read -p "${GG}Enter the name of the branch to switch to: ${BB}" branch_name
    git checkout "$branch_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Switched to branch '$branch_name' successfully!${RT}"
    else
        echo -e "${RE}Failed to switch to branch '$branch_name'.${RT}"
    fi
}

create_remote_branch() {
    list_branches
    read -p "${GG}Enter the name of the new branch: ${BB}" branch_name
    if [[ ! "$branch_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    
        echo -e "${RE}Error: Invalid branch name.${RT}"
        return
    fi
    git checkout -b "$branch_name"
    git push -u origin "$branch_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Remote branch '$branch_name' created and pushed successfully!${RT}"
    else
        echo -e "${RE}Failed to create remote branch '$branch_name'.${RT}"
    fi
}

delete_remote_branch() {
    list_branches
    read -p "${GG}Enter the name of the remote branch to delete: ${BB}" branch_name
    git push origin --delete "$branch_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Remote branch '$branch_name' deleted successfully!${RT}"
    else
        echo -e "${RE}Failed to delete remote branch '$branch_name'.${RT}"
    fi
}

switch_remote_branch() {
    git fetch --all
    list_branches
    read -p "${GG}Enter the name of the remote branch to switch to: ${BB}" branch_name
    git checkout -b "$branch_name" "origin/$branch_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Switched to remote branch '$branch_name' successfully!${RT}"
    else
        echo -e "${RE}Failed to switch to remote branch '$branch_name'.${RT}"
    fi
}

rebase_branch() {
    list_branches
    read -p "${GG}Enter the name of the branch to rebase onto: ${BB}" branch_name
    git rebase "$branch_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Rebase onto '$branch_name' completed successfully!${RT}"
    else
        echo -e "${RE}Rebase failed. Resolve conflicts and run 'git rebase --continue'.${RT}"
    fi
}

rename_branch() {
    list_branches
    read -p "${GG}Enter the current name of the branch: ${BB}" old_name
    read -p "${GG}Enter the new name for the branch: ${BB}" new_name
    if [[ ! "$new_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo -e "${RE}Error: Invalid branch name.${RT}"
        return
    fi
    git branch -m "$old_name" "$new_name"
    if [ $? -eq 0 ]; then
        echo -e "${GG}Branch renamed from '$old_name' to '$new_name' successfully!${RT}"
    else
        echo -e "${RE}Failed to rename branch.${RT}"
    fi
}

view_branch_history() {
    list_branches
    read -p "${GG}Enter the name of the branch to view history: ${BB}" branch_name
    echo -e "${CY}Commit history for branch '$branch_name':${RT}"
    git log "$branch_name" --oneline
}

# Menu Navigation
branch_management() {
    while true; do
        branch_menu
        read -p "Select an option (0 to go back): " option
        case $option in
            1) create_branch ;;
            2) delete_branch ;;
            3) merge_branch ;;
            4) list_branches ;;
            5) switch_branch ;;
            6) create_remote_branch ;;
            7) delete_remote_branch ;;
            8) switch_remote_branch ;;
            9) rebase_branch ;;
            10) rename_branch ;;
            11) view_branch_history ;;
            0) clear; break ;;
            *) echo "${RE}Invalid option! Please try again.${RT}" ;;
        esac
        read -p "${BB}Press [Enter] to continue...${RT}"
    done
}

check_git_repo
branch_management