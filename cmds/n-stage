#!/bin/bash

source /c/GitNova/cmds/utils/utils

# Staging and Stash Menu
staging_stash_menu() {
    while true; do
        clear
        echo -e "${RE}Staging and Stash Options:${RT}"
        echo -e "${RE}[${WHITE}1${RE}]${OG} Stage all changes ${GG}git add ."
        echo -e "${RE}[${WHITE}2${RE}]${OG} Stage a specific file ${GG}git add file_name"
        echo -e "${RE}[${WHITE}3${RE}]${OG} Unstage a file ${GG}git reset file_name"
        echo -e "${RE}[${WHITE}4${RE}]${OG} Unstage all changes ${GG}git reset"
        echo -e "${RE}[${WHITE}5${RE}]${OG} Stash changes ${GG}git stash"
        echo -e "${RE}[${WHITE}6${RE}]${OG} Apply stashed changes ${GG}git stash apply"
        echo -e "${RE}[${WHITE}7${RE}]${OG} Apply a specific stash ${GG}git stash apply stash@{n}"
        echo -e "${RE}[${WHITE}8${RE}]${OG} Drop a stash ${GG}git stash drop stash@{n}"
        echo -e "${RE}[${WHITE}9${RE}]${OG} List stashed changes ${GG}git stash list"
        echo -e "${RE}[${WHITE}10${RE}]${OG} Pop the most recent stash ${GG}git stash pop"
        echo -e "${RE}[${WHITE}11${RE}]${OG} Clear all stashes ${GG}git stash clear"
        echo -e "${RE}[${WHITE}12${RE}]${OG} Stage changes interactively ${GG}git add -p"
        echo -e "${RE}[${WHITE}13${RE}]${OG} View stash diff ${GG}git stash show -p stash@{n}"
        echo -e "${RE}[${WHITE}0${RE}]${OG} Back to main menu"
        echo
        read -p "${RE}[${WHITE}-${RE}]${GG} Select an option: ${BB}" selected

        case $selected in
            1) stage_all_changes ;;
            2) stage_specific_file ;;
            3) unstage_file ;;
            4) unstage_all_changes ;;
            5) stash_changes ;;
            6) apply_stashed_changes ;;
            7) apply_specific_stash ;;
            8) drop_stash ;;
            9) list_stashed_changes ;;
            10) pop_stash ;;
            11) clear_all_stashes ;;
            12) stage_interactively ;;
            13) view_stash_diff ;;
            0) clear; break ;;  # Exit the loop and return to the main menu
            *) echo -e "${RE}Invalid option! Please try again.${RT}" ;;
        esac

        read -p "${GG}Press [Enter] to return to the menu...${RT}"
    done
}

# Functions for each option
stage_all_changes() {
    git add .
    echo -e "${GG}All changes have been staged.${RT}"
}

stage_specific_file() {
    read -p "${GG}Enter the file name to stage: ${BB}" file_name
    if [[ ! -f "$file_name" ]]; then
        echo -e "${RE}Error: File '$file_name' does not exist.${RT}"
        return
    fi
    git add "$file_name" || echo -e "${RE}Error: File '$file_name' could not be staged.${RT}"
    echo -e "${GG}File '$file_name' has been staged.${RT}"
}

unstage_file() {
    read -p "${GG}Enter the file name to unstage: ${BB}" file_name
    if [[ ! -f "$file_name" ]]; then
        echo -e "${RE}Error: File '$file_name' does not exist.${RT}"
        return
    fi
    git reset "$file_name" || echo -e "${RE}Error: File '$file_name' could not be unstaged.${RT}"
    echo -e "${GG}File '$file_name' has been unstaged.${RT}"
}

unstage_all_changes() {
    git reset
    echo -e "${GG}All changes have been unstaged.${RT}"
}

stash_changes() {
    read -p "${GG}Enter a message for the stash: ${BB}" stash_message
    git stash push -m "$stash_message" || echo -e "${RE}Error: Failed to stash changes.${RT}"
    echo -e "${GG}Changes have been stashed with message: '$stash_message'.${RT}"
}

apply_stashed_changes() {
    git stash apply || echo -e "${RE}Error: Failed to apply stashed changes.${RT}"
    echo -e "${GG}Stashed changes have been applied.${RT}"
}

apply_specific_stash() {
    git stash list
    read -p "${GG}Enter the stash ID to apply (e.g., stash@{0}): ${BB}" stash_id
    git stash apply "$stash_id" || echo -e "${RE}Error: Failed to apply stash '$stash_id'.${RT}"
    echo -e "${GG}Stash '$stash_id' has been applied.${RT}"
}

drop_stash() {
    git stash list
    read -p "${GG}Enter the stash ID to drop (e.g., stash@{0}): ${BB}" stash_id
    git stash drop "$stash_id" || echo -e "${RE}Error: Failed to drop stash '$stash_id'.${RT}"
    echo -e "${GG}Stash '$stash_id' has been dropped.${RT}"
}

list_stashed_changes() {
    git stash list
}

pop_stash() {
    git stash pop || echo -e "${RE}Error: Failed to pop the stash.${RT}"
    echo -e "${GG}Stash applied and dropped successfully.${RT}"
}

clear_all_stashes() {
    read -p "${GG}Are you sure you want to clear all stashes? (y/n): ${BB}" confirm
    if [[ $confirm == "y" || $confirm == "Y" ]]; then
        git stash clear || echo -e "${RE}Error: Failed to clear stashes.${RT}"
        echo -e "${GG}All stashes have been cleaRE.${RT}"
    else
        echo -e "${RE}Operation canceled.${RT}"
    fi
}

stage_interactively() {
    git add -p
    echo -e "${GG}Interactive staging completed.${RT}"
}

view_stash_diff() {
    git stash list
    read -p "${GG}Enter the stash ID to view diff (e.g., stash@{0}): ${BB}" stash_id
    git stash show -p "$stash_id" || echo -e "${RE}Error: Failed to view stash diff.${RT}"
}

# Start the menu
check_git_repo
staging_stash_menu
